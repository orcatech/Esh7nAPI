com.loopj.android.http.AsyncHttpClient -> com.a.a.a.a:
    int maxConnections -> a
    int timeout -> b
    org.apache.http.impl.client.DefaultHttpClient httpClient -> c
    org.apache.http.protocol.HttpContext httpContext -> d
    java.util.concurrent.ThreadPoolExecutor threadPool -> e
    java.util.Map requestMap -> f
    java.util.Map clientHeaderMap -> g
    boolean isUrlEncodingEnabled -> h
    org.apache.http.conn.scheme.SchemeRegistry getDefaultSchemeRegistry(boolean,int,int) -> a
    com.loopj.android.http.RequestHandle get(java.lang.String,com.loopj.android.http.RequestParams,com.loopj.android.http.ResponseHandlerInterface) -> a
    com.loopj.android.http.RequestHandle get(android.content.Context,java.lang.String,com.loopj.android.http.RequestParams,com.loopj.android.http.ResponseHandlerInterface) -> a
    com.loopj.android.http.RequestHandle post(java.lang.String,com.loopj.android.http.RequestParams,com.loopj.android.http.ResponseHandlerInterface) -> b
    com.loopj.android.http.RequestHandle post(android.content.Context,java.lang.String,com.loopj.android.http.RequestParams,com.loopj.android.http.ResponseHandlerInterface) -> b
    com.loopj.android.http.RequestHandle post(android.content.Context,java.lang.String,org.apache.http.HttpEntity,java.lang.String,com.loopj.android.http.ResponseHandlerInterface) -> a
    com.loopj.android.http.RequestHandle sendRequest(org.apache.http.impl.client.DefaultHttpClient,org.apache.http.protocol.HttpContext,org.apache.http.client.methods.HttpUriRequest,java.lang.String,com.loopj.android.http.ResponseHandlerInterface,android.content.Context) -> a
    java.lang.String getUrlWithQueryString(boolean,java.lang.String,com.loopj.android.http.RequestParams) -> a
    org.apache.http.HttpEntity paramsToEntity(com.loopj.android.http.RequestParams,com.loopj.android.http.ResponseHandlerInterface) -> a
    org.apache.http.client.methods.HttpEntityEnclosingRequestBase addEntityToRequestBase(org.apache.http.client.methods.HttpEntityEnclosingRequestBase,org.apache.http.HttpEntity) -> a
    java.util.Map access$000(com.loopj.android.http.AsyncHttpClient) -> a
com.loopj.android.http.AsyncHttpClient$1 -> com.a.a.a.b:
    com.loopj.android.http.AsyncHttpClient this$0 -> a
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
com.loopj.android.http.AsyncHttpClient$2 -> com.a.a.a.c:
    com.loopj.android.http.AsyncHttpClient this$0 -> a
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
com.loopj.android.http.AsyncHttpClient$InflatingEntity -> com.a.a.a.d:
    java.io.InputStream getContent() -> getContent
    long getContentLength() -> getContentLength
com.loopj.android.http.AsyncHttpRequest -> com.a.a.a.e:
    org.apache.http.impl.client.AbstractHttpClient client -> a
    org.apache.http.protocol.HttpContext context -> b
    org.apache.http.client.methods.HttpUriRequest request -> c
    com.loopj.android.http.ResponseHandlerInterface responseHandler -> d
    int executionCount -> e
    void run() -> run
    void makeRequest() -> a
    void makeRequestWithRetries() -> b
com.loopj.android.http.AsyncHttpResponseHandler -> com.a.a.a.f:
    android.os.Handler handler -> a
    java.lang.String responseCharset -> b
    java.lang.Boolean useSynchronousMode -> c
    java.net.URI requestURI -> d
    org.apache.http.Header[] requestHeaders -> e
    void setRequestURI(java.net.URI) -> a
    void setRequestHeaders(org.apache.http.Header[]) -> a
    boolean getUseSynchronousMode() -> a
    void setCharset(java.lang.String) -> a
    java.lang.String getCharset() -> b
    void onProgress(int,int) -> a
    void onStart() -> c
    void onFinish() -> d
    void onSuccess(java.lang.String) -> b
    void onSuccess(int,org.apache.http.Header[],java.lang.String) -> a
    void onSuccess(int,java.lang.String) -> a
    void onSuccess(int,org.apache.http.Header[],byte[]) -> a
    void onFailure(java.lang.Throwable) -> a
    void onFailure(java.lang.Throwable,java.lang.String) -> a
    void onFailure(int,java.lang.Throwable,java.lang.String) -> a
    void onFailure(int,org.apache.http.Header[],java.lang.Throwable,java.lang.String) -> a
    void onFailure(int,org.apache.http.Header[],byte[],java.lang.Throwable) -> a
    void onRetry() -> e
    void sendProgressMessage(int,int) -> b
    void sendSuccessMessage(int,org.apache.http.Header[],byte[]) -> b
    void sendFailureMessage(int,org.apache.http.Header[],byte[],java.lang.Throwable) -> b
    void sendStartMessage() -> f
    void sendFinishMessage() -> g
    void sendRetryMessage() -> h
    void handleMessage(android.os.Message) -> a
    void sendMessage(android.os.Message) -> b
    void postRunnable(java.lang.Runnable) -> a
    android.os.Message obtainMessage(int,java.lang.Object) -> a
    void sendResponseMessage(org.apache.http.HttpResponse) -> a
    byte[] getResponseData(org.apache.http.HttpEntity) -> a
com.loopj.android.http.AsyncHttpResponseHandler$ResponderHandler -> com.a.a.a.g:
    java.lang.ref.WeakReference mResponder -> a
    void handleMessage(android.os.Message) -> handleMessage
com.loopj.android.http.JsonHttpResponseHandler -> com.a.a.a.h:
    void onSuccess(org.json.JSONObject) -> a
    void onSuccess(org.json.JSONArray) -> a
    void onSuccess(int,org.apache.http.Header[],org.json.JSONObject) -> a
    void onSuccess(int,org.json.JSONObject) -> a
    void onSuccess(int,org.apache.http.Header[],org.json.JSONArray) -> a
    void onSuccess(int,org.json.JSONArray) -> a
    void onFailure(java.lang.Throwable,org.json.JSONObject) -> a
    void onFailure(int,java.lang.Throwable,org.json.JSONObject) -> a
    void onFailure(int,org.apache.http.Header[],java.lang.Throwable,org.json.JSONObject) -> a
    void onFailure(java.lang.Throwable,org.json.JSONArray) -> a
    void onFailure(int,java.lang.Throwable,org.json.JSONArray) -> a
    void onFailure(int,org.apache.http.Header[],java.lang.Throwable,org.json.JSONArray) -> a
    void onSuccess(int,org.apache.http.Header[],java.lang.String) -> a
    void onFailure(int,org.apache.http.Header[],java.lang.String,java.lang.Throwable) -> a
    java.lang.Object parseResponse(java.lang.String) -> c
com.loopj.android.http.JsonHttpResponseHandler$1 -> com.a.a.a.i:
    java.lang.String val$responseBody -> a
    int val$statusCode -> b
    org.apache.http.Header[] val$headers -> c
    com.loopj.android.http.JsonHttpResponseHandler this$0 -> d
    void run() -> run
com.loopj.android.http.JsonHttpResponseHandler$1$1 -> com.a.a.a.j:
    java.lang.Object val$jsonResponse -> a
    com.loopj.android.http.JsonHttpResponseHandler$1 this$1 -> b
    void run() -> run
com.loopj.android.http.JsonHttpResponseHandler$1$2 -> com.a.a.a.k:
    org.json.JSONException val$ex -> a
    com.loopj.android.http.JsonHttpResponseHandler$1 this$1 -> b
    void run() -> run
com.loopj.android.http.JsonHttpResponseHandler$2 -> com.a.a.a.l:
    java.lang.String val$responseBody -> a
    int val$statusCode -> b
    org.apache.http.Header[] val$headers -> c
    java.lang.Throwable val$e -> d
    com.loopj.android.http.JsonHttpResponseHandler this$0 -> e
    void run() -> run
com.loopj.android.http.JsonHttpResponseHandler$2$1 -> com.a.a.a.m:
    java.lang.Object val$jsonResponse -> a
    com.loopj.android.http.JsonHttpResponseHandler$2 this$1 -> b
    void run() -> run
com.loopj.android.http.JsonHttpResponseHandler$2$2 -> com.a.a.a.n:
    org.json.JSONException val$ex -> a
    com.loopj.android.http.JsonHttpResponseHandler$2 this$1 -> b
    void run() -> run
com.loopj.android.http.MySSLSocketFactory -> com.a.a.a.o:
    javax.net.ssl.SSLContext sslContext -> a
    java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean) -> createSocket
    java.net.Socket createSocket() -> createSocket
    java.security.KeyStore getKeystore() -> a
    org.apache.http.conn.ssl.SSLSocketFactory getFixedSocketFactory() -> b
com.loopj.android.http.MySSLSocketFactory$1 -> com.a.a.a.p:
    com.loopj.android.http.MySSLSocketFactory this$0 -> a
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
com.loopj.android.http.RequestHandle -> com.a.a.a.q:
    java.util.concurrent.Future request -> a
com.loopj.android.http.RequestParams -> com.a.a.a.r:
    boolean isRepeatable -> a
    java.util.concurrent.ConcurrentHashMap urlParams -> b
    java.util.concurrent.ConcurrentHashMap streamParams -> c
    java.util.concurrent.ConcurrentHashMap fileParams -> d
    java.util.concurrent.ConcurrentHashMap urlParamsWithObjects -> e
    void put(java.lang.String,java.lang.String) -> a
    void put(java.lang.String,java.io.InputStream,java.lang.String) -> a
    void put(java.lang.String,java.io.InputStream,java.lang.String,java.lang.String) -> a
    void put(java.lang.String,java.lang.Object) -> a
    void add(java.lang.String,java.lang.String) -> b
    java.lang.String toString() -> toString
    org.apache.http.HttpEntity getEntity(com.loopj.android.http.ResponseHandlerInterface) -> a
    org.apache.http.HttpEntity createFormEntity() -> c
    org.apache.http.HttpEntity createMultipartEntity(com.loopj.android.http.ResponseHandlerInterface) -> b
    void init() -> d
    java.util.List getParamsList() -> a
    java.util.List getParamsList(java.lang.String,java.lang.Object) -> b
    java.lang.String getParamString() -> b
com.loopj.android.http.RequestParams$FileWrapper -> com.a.a.a.s:
    java.io.File file -> a
    java.lang.String contentType -> b
com.loopj.android.http.RequestParams$StreamWrapper -> com.a.a.a.t:
    java.io.InputStream inputStream -> a
    java.lang.String name -> b
    java.lang.String contentType -> c
com.loopj.android.http.ResponseHandlerInterface -> com.a.a.a.u:
    void sendResponseMessage(org.apache.http.HttpResponse) -> a
    void sendStartMessage() -> f
    void sendFinishMessage() -> g
    void sendProgressMessage(int,int) -> b
    void sendFailureMessage(int,org.apache.http.Header[],byte[],java.lang.Throwable) -> b
    void sendRetryMessage() -> h
    void setRequestURI(java.net.URI) -> a
    void setRequestHeaders(org.apache.http.Header[]) -> a
com.loopj.android.http.RetryHandler -> com.a.a.a.v:
    java.util.HashSet exceptionWhitelist -> a
    java.util.HashSet exceptionBlacklist -> b
    int maxRetries -> c
    int retrySleepTimeMS -> d
    boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext) -> retryRequest
    boolean isInList(java.util.HashSet,java.lang.Throwable) -> a
com.loopj.android.http.SimpleMultipartEntity -> com.a.a.a.w:
    byte[] CR_LF -> a
    byte[] TRANSFER_ENCODING_BINARY -> b
    char[] MULTIPART_CHARS -> c
    java.lang.String boundary -> d
    byte[] boundaryLine -> e
    byte[] boundaryEnd -> f
    boolean isRepeatable -> g
    java.util.List fileParts -> h
    java.io.ByteArrayOutputStream out -> i
    com.loopj.android.http.ResponseHandlerInterface progressHandler -> j
    int bytesWritten -> k
    int totalSize -> l
    void addPart(java.lang.String,java.lang.String,java.lang.String) -> a
    void addPart(java.lang.String,java.lang.String) -> a
    void addPart(java.lang.String,java.io.File,java.lang.String) -> a
    void addPart(java.lang.String,java.lang.String,java.io.InputStream,java.lang.String) -> a
    byte[] createContentType(java.lang.String) -> a
    byte[] createContentDisposition(java.lang.String) -> b
    byte[] createContentDisposition(java.lang.String,java.lang.String) -> b
    void updateProgress(int) -> a
    long getContentLength() -> getContentLength
    org.apache.http.Header getContentType() -> getContentType
    boolean isChunked() -> isChunked
    void setIsRepeatable(boolean) -> a
    boolean isRepeatable() -> isRepeatable
    boolean isStreaming() -> isStreaming
    void writeTo(java.io.OutputStream) -> writeTo
    org.apache.http.Header getContentEncoding() -> getContentEncoding
    void consumeContent() -> consumeContent
    java.io.InputStream getContent() -> getContent
    byte[] access$000(com.loopj.android.http.SimpleMultipartEntity) -> a
    byte[] access$100(com.loopj.android.http.SimpleMultipartEntity,java.lang.String,java.lang.String) -> a
    byte[] access$200(com.loopj.android.http.SimpleMultipartEntity,java.lang.String) -> a
    byte[] access$300() -> a
    byte[] access$400() -> b
    void access$500(com.loopj.android.http.SimpleMultipartEntity,int) -> a
com.loopj.android.http.SimpleMultipartEntity$FilePart -> com.a.a.a.x:
    java.io.File file -> a
    byte[] header -> b
    com.loopj.android.http.SimpleMultipartEntity this$0 -> c
    byte[] createHeader(java.lang.String,java.lang.String,java.lang.String) -> a
    long getTotalLength() -> a
    void writeTo(java.io.OutputStream) -> a
com.loopj.android.http.TextHttpResponseHandler -> com.a.a.a.y:
    void onFailure(java.lang.String,java.lang.Throwable) -> a
    void onFailure(int,org.apache.http.Header[],java.lang.String,java.lang.Throwable) -> a
    void onSuccess(int,org.apache.http.Header[],java.lang.String) -> a
    void onSuccess(int,org.apache.http.Header[],byte[]) -> a
    void onFailure(int,org.apache.http.Header[],byte[],java.lang.Throwable) -> a
com.orcatech.Esh7n.CameraOverlay -> com.orcatech.Esh7n.CameraOverlay:
    android.graphics.Rect CameraHole -> a
    android.graphics.Paint rectPaint -> b
    android.graphics.Paint outPaint -> c
    android.graphics.Rect above -> d
    android.graphics.Rect bottom -> e
    android.graphics.Rect right -> f
    android.graphics.Rect left -> g
    android.util.DisplayMetrics metrics -> h
    void onDraw(android.graphics.Canvas) -> onDraw
com.orcatech.Esh7n.CameraView -> com.orcatech.Esh7n.a:
    boolean DEBUGGING -> l
    com.orcatech.Esh7n.MyActivity mActivity -> a
    android.view.SurfaceHolder mHolder -> m
    android.hardware.Camera mCamera -> b
    java.util.List mPreviewSizeList -> c
    java.util.List mPictureSizeList -> d
    android.hardware.Camera$Size mPreviewSize -> e
    android.hardware.Camera$Size mPictureSize -> f
    int mSurfaceChangedCallDepth -> n
    com.orcatech.Esh7n.CameraView$LayoutMode mLayoutMode -> o
    int mCenterPosX -> p
    int mCenterPosY -> q
    boolean flashOn -> r
    com.orcatech.Esh7n.CameraView$PreviewReadyCallback mPreviewReadyCallback -> g
    android.media.AudioManager mgr -> h
    android.hardware.Camera$PictureCallback mCall -> i
    boolean mSurfaceConfiguring -> j
    android.hardware.Camera$ShutterCallback shutterCallback -> s
    android.hardware.Camera$AutoFocusCallback myAutoFocusCallback -> k
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void doSurfaceChanged(int,int) -> a
    android.hardware.Camera$Size determinePreviewSize(boolean,int,int) -> a
    android.hardware.Camera$Size determinePictureSize(android.hardware.Camera$Size) -> a
    boolean adjustSurfaceLayoutSize(android.hardware.Camera$Size,boolean,int,int) -> a
    void configureCameraParameters(android.hardware.Camera$Parameters,boolean) -> a
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void start() -> a
    void stop() -> b
    boolean isPortrait() -> c
    void setOneShotPreviewCallback(android.hardware.Camera$PreviewCallback) -> setOneShotPreviewCallback
    void snapShot() -> d
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void toggleFlash() -> e
    void openFlash(boolean) -> a
com.orcatech.Esh7n.CameraView$1 -> com.orcatech.Esh7n.b:
    com.orcatech.Esh7n.CameraView this$0 -> a
    void onPictureTaken(byte[],android.hardware.Camera) -> onPictureTaken
com.orcatech.Esh7n.CameraView$2 -> com.orcatech.Esh7n.c:
    com.orcatech.Esh7n.CameraView this$0 -> a
    void onShutter() -> onShutter
com.orcatech.Esh7n.CameraView$3 -> com.orcatech.Esh7n.d:
    com.orcatech.Esh7n.CameraView this$0 -> a
    void onAutoFocus(boolean,android.hardware.Camera) -> onAutoFocus
com.orcatech.Esh7n.CameraView$LayoutMode -> com.orcatech.Esh7n.e:
    com.orcatech.Esh7n.CameraView$LayoutMode FitToParent -> a
    com.orcatech.Esh7n.CameraView$LayoutMode NoBlank -> b
    com.orcatech.Esh7n.CameraView$LayoutMode[] $VALUES -> c
    com.orcatech.Esh7n.CameraView$LayoutMode[] values() -> values
    com.orcatech.Esh7n.CameraView$LayoutMode valueOf(java.lang.String) -> valueOf
com.orcatech.Esh7n.CameraView$PreviewReadyCallback -> com.orcatech.Esh7n.f:
    void onPreviewReady() -> a
com.orcatech.Esh7n.Esh7nAPI -> com.orcatech.Esh7n.g:
    java.lang.String MinDetectedNumbers -> a
    java.lang.Boolean isTestMode -> b
    com.orcatech.Esh7n.MyActivity mActivity -> c
    java.lang.String Country -> d
    java.lang.String Manufacture -> e
    java.lang.String Model -> f
    java.lang.String OS -> g
    java.lang.String NetworkOperatorName -> h
    java.lang.String PhoneSerialNo -> i
    java.lang.String LastOperationId -> j
    java.lang.String LastNumbers -> k
    void DetectNumbers(byte[],java.lang.String) -> a
    void sendRechargeFlag() -> a
    void getNumbersByOperationId(java.lang.String) -> a
    java.lang.String getLastNumbers(boolean) -> a
    com.orcatech.Esh7n.MyActivity access$000(com.orcatech.Esh7n.Esh7nAPI) -> a
    java.lang.String access$102(com.orcatech.Esh7n.Esh7nAPI,java.lang.String) -> a
    java.lang.String access$202(com.orcatech.Esh7n.Esh7nAPI,java.lang.String) -> b
    java.lang.String access$100(com.orcatech.Esh7n.Esh7nAPI) -> b
    java.lang.String access$200(com.orcatech.Esh7n.Esh7nAPI) -> c
com.orcatech.Esh7n.Esh7nAPI$1 -> com.orcatech.Esh7n.h:
    com.orcatech.Esh7n.Esh7nAPI this$0 -> a
    void onStart() -> c
    void onSuccess(org.json.JSONObject) -> a
    void onFailure(java.lang.Throwable,org.json.JSONObject) -> a
    void onFinish() -> d
com.orcatech.Esh7n.Esh7nAPI$2 -> com.orcatech.Esh7n.i:
    com.orcatech.Esh7n.Esh7nAPI this$0 -> a
    void onStart() -> c
    void onSuccess(org.json.JSONObject) -> a
    void onFailure(java.lang.Throwable,java.lang.String) -> a
    void onFinish() -> d
com.orcatech.Esh7n.Esh7nAPI$3 -> com.orcatech.Esh7n.j:
    com.orcatech.Esh7n.Esh7nAPI this$0 -> a
    void onStart() -> c
    void onSuccess(org.json.JSONObject) -> a
    void onFailure(java.lang.Throwable,java.lang.String) -> a
    void onFinish() -> d
com.orcatech.Esh7n.Esh7nAPI$Esh7NErrorCodes -> com.orcatech.Esh7n.k:
    com.orcatech.Esh7n.Esh7nAPI$Esh7NErrorCodes ErrorUnexpected -> a
    com.orcatech.Esh7n.Esh7nAPI$Esh7NErrorCodes ErrorFree -> b
    com.orcatech.Esh7n.Esh7nAPI$Esh7NErrorCodes ErrorInvalidAppidOrAppsecret -> c
    com.orcatech.Esh7n.Esh7nAPI$Esh7NErrorCodes ErrorInvalidImageFile -> d
    com.orcatech.Esh7n.Esh7nAPI$Esh7NErrorCodes ErrorServerDown -> e
    com.orcatech.Esh7n.Esh7nAPI$Esh7NErrorCodes ErrorOperationidNotfound -> f
    com.orcatech.Esh7n.Esh7nAPI$Esh7NErrorCodes ErrorTrialHasEnded -> g
    java.lang.String stringValue -> h
    com.orcatech.Esh7n.Esh7nAPI$Esh7NErrorCodes[] $VALUES -> i
    com.orcatech.Esh7n.Esh7nAPI$Esh7NErrorCodes[] values() -> values
    com.orcatech.Esh7n.Esh7nAPI$Esh7NErrorCodes valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
    com.orcatech.Esh7n.Esh7nAPI$Esh7NErrorCodes fromInteger(int) -> a
com.orcatech.Esh7n.MyActivity -> com.orcatech.Esh7n.MyActivity:
    com.orcatech.Esh7n.Esh7nAPI _esh7n -> a
    com.orcatech.Esh7n.CameraView mPreview -> c
    android.widget.RelativeLayout mLayout -> d
    boolean CapturingStatus -> e
    android.app.ProgressDialog pd -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onPause() -> onPause
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onDetectionDone(java.lang.String,java.lang.String,java.lang.String) -> a
    void Rest() -> a
    boolean access$002(com.orcatech.Esh7n.MyActivity,boolean) -> a
    com.orcatech.Esh7n.CameraView access$100(com.orcatech.Esh7n.MyActivity) -> a
com.orcatech.Esh7n.MyActivity$1 -> com.orcatech.Esh7n.l:
    com.orcatech.Esh7n.MyActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.orcatech.Esh7n.MyActivity$1$1 -> com.orcatech.Esh7n.m:
    com.orcatech.Esh7n.MyActivity$1 this$1 -> a
    void run() -> run
com.orcatech.Esh7n.MyActivity$2 -> com.orcatech.Esh7n.n:
    com.orcatech.Esh7n.MyActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.orcatech.Esh7n.MyActivity$3 -> com.orcatech.Esh7n.o:
    com.orcatech.Esh7n.MyActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.orcatech.Esh7n.NetworkInterface -> com.orcatech.Esh7n.p:
    com.loopj.android.http.AsyncHttpClient client -> a
    void post(java.lang.String,com.loopj.android.http.RequestParams,com.loopj.android.http.AsyncHttpResponseHandler) -> a
    void get(java.lang.String,com.loopj.android.http.RequestParams,com.loopj.android.http.AsyncHttpResponseHandler) -> b
    java.lang.String getAbsoluteUrl(java.lang.String) -> a
    boolean isNetworkAvailable(android.app.Activity) -> a
